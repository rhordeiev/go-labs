package main

import "fmt"

func main() {
	var x, y, z uint8

	x = 9
	y = 28
	z = x

	fmt.Println("Битовые операции")

	fmt.Printf("^x      = ^(%d)      = ^(%.8b)            = %.8b = %d\n", x, x, ^x, ^x)        //используется оператор инверсии, который меняет 0 на 1 и наоборот
	fmt.Printf("x << 2  = (%d << 2)  = (%.8b << 2)        = %.8b = %d\n", x, x, x<<2, x<<2)    //происходит смещение на два бита влево, а справа добавляются недостающие нули
	fmt.Printf("x >> 2  = (%d >> 2)  = (%.8b >> 2)        = %.8b = %d\n", x, x, x>>2, x>>2)    //происходит смещение на два бита вправо, а слева добавляются недостающие нули
	fmt.Printf("x & y   = (%d & %d)  = (%.8b & %.8b)  = %.8b = %d\n", x, y, x, y, x&y, x&y)    //происходит побитовое умножение, соответствующие биты умножаются друг с другом
	fmt.Printf("x | y   = (%d | %d)  = (%.8b | %.8b)  = %.8b = %d\n", x, y, x, y, x|y, x|y)    //происходит побитовая сложение, соответствующие биты добавляются друг с другом
	fmt.Printf("x ^ y   = (%d ^ %d)  = (%.8b ^ %.8b)  = %.8b = %d\n", x, y, x, y, x^y, x^y)    //происходит побитовое исключающее ИЛИ. Возвращает 1, если только один из соответствующих разрядов обоих чисел равен 1
	fmt.Printf("x &^ y  = (%d &^ %d) = (%.8b &^ %.8b) = %.8b = %d\n", x, y, x, y, x&^y, x&^y)  //операция И НЕ. Если соответствующий бит второго выражения равен 1, то результат будет 0. Если бит второго выражения равен 0, то берется значение соответствующего бита из первого выражения
	fmt.Printf("x %% y   = (%d %% %d)  = (%.8b %% %.8b)  = %.8b = %d\n", x, y, x, y, x%y, x%y) //возвращает остаток от деления

	fmt.Println("\nБитовые операции с присваиванием")

	x = z
	x &= y
	fmt.Printf("x &= y   = (%d &= %d)  = (%.8b &= %.8b)  = %.8b = %d\n", z, y, z, y, x, x) //описанное сверху побитовое умножение только операция выглядит так x = x & y
	x = z
	x = y
	fmt.Printf("x |= y   = (%d |= %d)  = (%.8b |= %.8b)  = %.8b = %d\n", z, y, z, y, x, x) //описанное сверху побитовое сложение только операция выглядит так x = x | y
	x = z
	x ^= y
	fmt.Printf("x ^= y   = (%d ^= %d)  = (%.8b ^= %.8b)  = %.8b = %d\n", z, y, z, y, x, x) //описанное сверху побитовое исключающее ИЛИ только операция выглядит так x = x ^= y
	x = z
	x &^= y
	fmt.Printf("x &^= y  = (%d &^= %d) = (%.8b &^= %.8b) = %.8b = %d\n", z, y, z, y, x, x) //описанное сверху операция И НЕ только операция выглядит так x = x &^ y
	x = z
	x %= y
	fmt.Printf("x %%= y   = (%d %%= %d)  = (%.8b %%= %.8b)  = %.8b = %d\n", z, y, z, y, x, x) //операция нахождения остатка от деления как сверху, только операция выглядит так x = x % y

	//Задание.
	//1. Пояснить результаты операций
}
